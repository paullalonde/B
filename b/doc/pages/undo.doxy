// ==========================================================================================
//  
//  Copyright (C) 2004-2005 Paul Lalonde enrg.
//  
//  This program is free software;  you can redistribute it and/or modify it under the 
//  terms of the GNU General Public License as published by the Free Software Foundation;  
//  either version 2 of the License, or (at your option) any later version.
//  
//  This program is distributed in the hope that it will be useful, but WITHOUT ANY 
//  WARRANTY;  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
//  PARTICULAR PURPOSE.  See the GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License along with this 
//  program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, 
//  Suite 330, Boston, MA  02111-1307  USA
//  
// ==========================================================================================

namespace B {

/*!

@page using_undo Supporting Undo

Table of Contents:
- @ref undo_policies
- @ref undo_actions
- @ref undo_action_groups
    - @ref nested_groups
- @ref undo_action_class
- @ref policy_coupling

Implementing %Undo/Redo (henceforth referred to generically as %undo) using the B framework 
involves some work at a very high level, and other work at a low level.  This article 
covers both aspects.


@section undo_policies Undo Policies

The first thing to do when adding %Undo support to an application is to decide what undo 
policy will be used.  What's an undo policy?  It's an object that implements a specific 
level of %Undo support.

B provides three undo policies:

- NullUndoPolicy.  This is a do-nothing policy.  It's the policy to use when you don't 
  wan't any %Undo support.
- SingleUndoPolicy.  This supports old-style 1-level deep %Undo.  Just like MacWrite 1.0.
- MultipleUndoPolicy.  This supports an arbitrary number of undos and redos.

Although these classes aren't related by inheritance, they are in a sense related because 
they implement the interface specified in UNDO_POLICY.  UNDO_POLICY specifies the member 
signatures required in order for a class to be usable as an undo policy object.

In B, undo policy objects are used as template parameters.  At present there are two 
classes which take an UNDO_POLICY template parameter:

- Application.  The application object may be the locus of %Undo support in either simple 
  applications that don't use documents, or very complex ones that allow application-wide 
  %Undo (i.e., performing 2 actions in 2 different documents, then doing %Undo twice, will 
  undo the action in each document).  Application's class declaration looks like this:
  @code
  template <..., class UNDO_POLICY, ...>  class Application ... {};
  @endcode
  So instantiating Application different undo policy classes will give you 
  varying levels of undo support:
  @code
  Application<..., NullUndoPolicy, ...>     // No undo support
  Application<..., SingleUndoPolicy, ...>   // 1-level-deep undo support, app-wide
  Application<..., MultipleUndoPolicy, ...> // arbitrary-depth undo support, app-wide
  @endcode
- Document.  This is the most interesting one.  Documents are usually the locus of %Undo 
  support, so it's natural that each document object have an associated undo policy 
  object.  Document's class declaration looks like this:
  @code
  template <class UNDO_POLICY, ...>  class Document ... {};
  @endcode
  As with Application, instantiating Document with different undo policy classes will 
  give you varying levels of undo support:
  @code
  Document<NullUndoPolicy, ...>     // No undo support
  Document<SingleUndoPolicy, ...>   // 1-level-deep undo support, per document
  Document<MultipleUndoPolicy, ...> // arbitrary-depth undo support, per document
  @endcode

So, with these two class templates, one can imagine a number of combinations:

- For applications without any undo support whatsoever, use NullUndoPolicy for both 
  the document and application classes.
- For document-centric undo, use SingleUndoPolicy or MultipleUndoPolicy for the document 
  class and NullUndoPolicy for the application class.
- For application-wide undo, use SingleUndoPolicy or MultipleUndoPolicy for the 
  application class.


@section undo_actions Undoable Actions

Once the undo policy has been decided upon, almost all undo-related development effort 
revolves around undo actions.  %Undo actions are "recorded" by the undo machinery 
(the undo policy object, ultimately) for later execution.  They typically store state 
which is restored at execution time.

Here's a simple example that changes a member variable called @c mThingy:

@code
// ### INCOMPLETE EXAMPLE ###
void MyClass::MyUndoableSetThingy(int inNewThingy)
{
    B::AutoUndo undo(...);
    
    // Creates an undo action that will be invoked when the user does Undo.  This 
    // function will be called with the old value of mThingy.
    undo.Add(boost::bind(&MyClass::MyUndoableSetThingy, this, mThingy));
    
    MySetThingy(inNewThingy);
    
    // ...
}

// A very simple "setter" function.
void MyClass::MySetThingy(int inNewThingy)
{
    mThingy = inNewThingy;
}
@endcode

A typical usage scenario would be:

-# The user performs an action that causes @c MyUndoableSetThingy() to be called.
-# An undo action is recorded.  The action will call @c MyUndoableSetThingy() with 
   the current value of @c mThingy.
-# The value of @c mThingy is changed to the new value.
-# Some time later, the user does %Undo.
-# The undo machinery executes the recorded undo action, which calls 
   @c MyUndoableSetThingy() with (what is now) the old value of @c mThingy.
-# A new undo action is recorded.  The action will call @c MyUndoableSetThingy() with 
   the current value of @c mThingy.
-# The value of @c mThingy is changed to the old value.
-# Some time later, the user does Redo.
-# etc.


@section undo_action_groups Undo Action Groups

The example in the preceding section is sufficient for simple cases.  Often however, 
user-triggered actions can modify an application's state in complex ways.  Ways which 
aren't amenable to encapsulation in a single member function.  That's where undo action 
groups come in.

%Undo action groups, as the name implies, group together an ordered collection of undo 
actions.  Furthermore, these groups are named;  the name is used to fill in the text 
of the %Undo menu item.  When a user issues an %Undo or Redo command, all of the actions 
in the group are executed in a LIFO manner.

To use action groups, one begins by "opening" a group.  Once a group is opened, any 
number of undo actions can be added to it.  After all of the actions are added, the 
group needs to be closed.  This can be done in one of two ways.  The usual way is to 
"commit" the group.  This closes the group and makes it available to the user as an 
%Undo or Redo menu item.  The other way is to "abort" the group.  This should be called 
when an exception occurs while a group is open.  Aborting a group will cause all 
previously recorded undo actions to be executed, then the group will be released.

Here's a simple example of using an undo action group:

@code
void MyUndoableSetThingies(std::vector<MyClass*>& vec, int inNewThingy)
{
    // Open an undo action group.
    B::AutoUndo undo(B::String("Change Thingies"));     // should be localised.
    
    for (std::vector<MyClass*>::iterator it = vec.begin(); 
         it != vec.end(); 
         ++it)
    {
        // Add the action to the group.
        undo.Add(boost::bind(&MyClass::MySetThingy, *it, inNewThingy));
        
        // Execute the first state change.
        (*it)->MySetThingy(inNewThingy);
    }
    
    // VERY IMPORTANT:  Commit the group.
    undo.Commit();
}
@endcode

As you can probably guess, AutoUndo is a helper class whose constructor opens an undo 
action group.  Once opened, actions are added to the group via @c Add().  Finally, the 
group is committed prior to returning.  This is very important!  If @c Commit() is not 
called, UndoAction's destructor will assume an exception has occurred and will abort the 
group instead of committing it.


@subsection nested_groups Nested Groups

In addition to allowing the concatenation of undo actions, undo action groups may also 
be nested.  Each nesting level gets its own name;  however, only the top-most group's 
name is used in the %Undo menu item text. 

The previous example could easily be rewritten to use nesting:

@code
void MyUndoableSetThingies(std::vector<MyClass*>& vec, int inNewThingy)
{
    // Open an undo action group.
    B::AutoUndo undo(B::String("Change Thingies"));     // should be localised.
    
    for (std::vector<MyClass*>::iterator it = vec.begin(); 
         it != vec.end(); 
         ++it)
    {
        // Add an undo action & perform the state change.
        (*it)->MyUndoableSetThingy(inNewThingy);
    }
    
    // VERY IMPORTANT:  Commit the group.
    undo.Commit();
}

void MyClass::MyUndoableSetThingy(int inNewThingy)
{
    B::AutoUndo undo(B::String("Change Thingy"));       // should be localised.
    
    // Creates an undo action that will be invoked when the user does Undo.  This 
    // function will be called with the old value of mThingy.
    undo.Add(boost::bind(&MyClass::MyUndoableSetThingy, this, mThingy));
    
    // No need for MySetThingy() any more.
    mThingy = inNewThingy;
    
    // VERY IMPORTANT:  Commit the group.
    undo.Commit();
}
@endcode

This version is an improvement over the previous one, because (1) it's shorter, and 
especially (2) the code to add the undo action and to change the object state is in 
a single function.  That means the function could be implemented in an atomic manner 
(i.e. either both the undo action addition and the state change succeed, or both fail).  
Also, both @c MyClass::MyUndoableSetThingy() and @c MyUndoableSetThingies() can be 
invoked directly from UI code, and their undo support will function properly.

By using an STL algorithm, the code can be made even shorter:

@code
void MyUndoableSetThingies(std::vector<MyClass*>& vec, int inNewThingy)
{
    // Open an undo action group.
    B::AutoUndo undo(B::String("Change Thingies"));     // should be localised.
    
    // Add an undo action & perform the state change for each object.
    std::for_each(vec.begin(), vec.end(), 
                  boost::bind(&MyClass::MyUndoableSetThingy, _1, inNewThingy));
    
    // VERY IMPORTANT:  Commit the group.
    undo.Commit();
}
@endcode


@subsection undo_action_class   Class UndoAction

Until now, the adding of undo actions has been accomplished by passing a @c boost::bind 
object to AutoUndo::Add().  This is actually a convenience function.  The primitive 
action addition function takes an object of type UndoAction.

Here is a slightly simplified version of UndoAction's class declaration:

@code
class UndoAction
{
public:
    
    virtual ~UndoAction() throw();
    
    // Invocation.  The object should perform its action.
    virtual void    Perform() = 0;
    
    ...
    
protected:
    
    UndoAction();
};
@endcode

This is an abstract base class, so it can't be instantiated directly.  Concrete derivatives 
must implement @c Perform() which is the function that does whatever needs to be done.

For example, @c MyUndoableSetThingy() could be re-implemented to use a custom class derived 
from UndoAction:

@code
class MyUndoThingyChange : public B::UndoAction
{
public:
            MyUndoStateChange(MyClass* obj, int inOldThingy)
                : mObj(obj), mOldThingy(inOldThingy) {}

    void    Perform() { mObj->MyChangeState(mOldThingy); }
    
private:
    
    MyClass* mObj;
    int      mOldThingy;
};

void MyClass::MyUndoableSetThingy(int inNewThingy)
{
    B::AutoUndo undo(B::String("Change Thingy"));       // should be localised.
    
    // Creates an custom undo action that will be invoked when the user does Undo.
    undo.Add(std::auto_ptr<B::UndoAction>(new MyUndoThingyChange(this, mThingy));
    
    MySetThingy(inNewThingy);
    
    undo.Commit();
}
@endcode

This version is equivalent to the first one;  obviously it involves a lot more typing!  
However for certain needs it can make more sense to put undo processing in custom classes.

Note that AutoUndo::Add() is passed an @c std::auto_ptr<B::UndoAction>, not a pointer to 
an UndoAction.  This makes explicit the fact that the AutoUndo object takes control of 
the UndoAction's lifetime.


@section policy_coupling Coupling Between Undo Policy and Undo Actions

In all of the preceding examples of undo actions, no mention was made of undo policy 
objects.  This is because the examples used AutoUndo, which isolates application code 
from the undo policy.  This is a good thing, because the precise configuration of undo 
policies (as discussed in @ref undo_policies above) is best considered to be an 
implementation detail.

Under the hood, AutoUndo communicates with policy objects via a set of custom Carbon 
Events.  This allows AutoUndo to not have to worry about the location (%Document? 
%Application?) of the policy object.

If your application has special needs, it's possible to directly call member functions of 
policy objects.  Both Application::GetUndoPolicy() and Document::GetUndoPolicy() 
provide access to those class' policy objects.  For example:

@code
void MyClass::MyUndoableSetThingy(int inNewThingy)
{
    MultipleUndoPolicy& policy  = MyGetUndoPolicy();
    
    policy.BeginGroup(B::String("Change Thingy"));
    
    try
    {
        policy.Add(boost::bind(&MyClass::MyUndoableSetThingy, this, mThingy));
        
        mThingy = inNewThingy;
        
        policy.CommitGroup();
    }
    catch (...)
    {
        policy.AbortGroup();
        
        throw;
    }
}
@endcode

This implementation will be faster than the others because it doesn't bother with the 
overhead of creating and dispatching Carbon Events.  It is however much more verbose, 
as well as tightly bound to the exact undo policy class chosen for either Document or 
Application, depending on how @c MyGetUndoPolicy() is implemented.  This implementation 
is probably a poor choice for most situations.

*/

}   // namespace B
